<?xml version="1.0" encoding="UTF-8"?><record_update table="wf_element_activity">
    <wf_element_activity action="INSERT_OR_UPDATE">
        <access>public</access>
        <attributes/>
        <base_provider display_value="Run Script">d0c7fe11eb013100fc5e8a7af106fee0</base_provider>
        <category/>
        <checked_out_by/>
        <default_height/>
        <default_width/>
        <description>Gets VM Instance IP Addresses </description>
        <image>images/heisenberg_icons/workflow_ie8/provider_runscript.png</image>
        <input_meta>{"name":"Input","type":"DATA_OBJECT","properties":[{"name":"vm_sysid","type":"STRING","mandatory":false}]}</input_meta>
        <input_process_script/>
        <input_transform/>
        <local_variables/>
        <name>Get VM IP</name>
        <output_meta>{"name":"Output","type":"DATA_OBJECT","properties":[{"name":"private_ip","type":"STRING"},{"name":"public_ip","type":"STRING"}]}</output_meta>
        <output_process_script/>
        <output_transform/>
        <processing_script><![CDATA[	var getIPAddresses  = function(vmId) {
		var ipaddr=getIPAddressObject(vmId);
		var ipAddress = {};
		if(gs.nil(ipaddr))
			return "";
		var privateIp= ipaddr.getValue('private_ip');
		var publicIp=  ipaddr.getValue('public_ip');
		var ip_address=  ipaddr.getValue('ip_address');
		ipAddress['private_ip']=privateIp;
		ipAddress['public_ip']=publicIp;
		// vmware points to a different table and has its custom attribute for storing ip_adderess,need to be relooked.
		if(gs.nil(publicIp) && gs.nil(privateIp))
			ipAddress['public_ip']=ip_address;

		return global.JSON.stringify(ipAddress);
	};
    
    var getIPAddressObject = function(vmId) {
		var useTypeId, implementTypeId,endpoint,ipaddr;
		var gRelType = new GlideRecord("cmdb_rel_type");
		gRelType.query("name","Use End Point To::Use End Point From");
		if(gRelType.next())
			useTypeId  = gRelType.getUniqueValue();

		var grRelTypeImpl = new GlideRecord("cmdb_rel_type");
		grRelTypeImpl.query("name","Implement End Point To::Implement End Point From");
		if(grRelTypeImpl.next())
			implementTypeId  = grRelTypeImpl.getUniqueValue();

		var gsCI = new GlideRecord("cmdb_rel_ci");
		gsCI.addQuery("parent",vmId);
		gsCI.addQuery("type",useTypeId);
		gsCI.query();
		var endpoints = [];

		if(gsCI.hasNext()){
			while(gsCI.next()){
			var useEndpoint = gsCI.getValue("child");
			endpoints.push(useEndpoint);
		}
		}
		for(var myendpoint in endpoints){
		var gsCINet = new GlideRecord("cmdb_rel_ci");
		gsCINet.addQuery("parent",endpoints[myendpoint]);
		gsCINet.addQuery("type",implementTypeId);
		gsCINet.query();
		if(gsCINet.hasNext()){
				while(gsCINet.next()){
					var endpointTable = gsCINet.child.getRefRecord().getTableName();
					var isNicTable= (endpointTable == "cmdb_ci_vmware_nic" )|| (endpointTable == "cmdb_ci_nic");
					if(isNicTable){
					ipaddr=new GlideRecord(gsCINet.child.getRefRecord().getTableName());
					ipaddr.get(gsCINet.getValue("child"));
					return ipaddr;
					}
				}
			}
		}

			return "";
		};
    
      var ipObj = getIPAddressObject(activityInput.vm_sysid);
  gs.info("IPAddresses: " + ipObj.getValue('private_ip'));
  activityOutput.private_ip = ipObj.getValue('private_ip');
  activityOutput.public_ip = ipObj.getValue('public_ip');
 
]]></processing_script>
        <sample_payloads>{}</sample_payloads>
        <short_description/>
        <style/>
        <sys_class_name>wf_element_activity</sys_class_name>
        <sys_created_by>john.depot</sys_created_by>
        <sys_created_on>2018-08-31 11:06:17</sys_created_on>
        <sys_id>31227441dbd8e380c71f6583ca961981</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>Get VM IP</sys_name>
        <sys_package display_value="CMP_Discovery" source="x_snc_cmp_discover">979a097cdb58a380c71f6583ca9619db</sys_package>
        <sys_policy/>
        <sys_scope display_value="CMP_Discovery">979a097cdb58a380c71f6583ca9619db</sys_scope>
        <sys_update_name>wf_element_activity_31227441dbd8e380c71f6583ca961981</sys_update_name>
        <sys_updated_by>john.depot</sys_updated_by>
        <sys_updated_on>2018-08-31 11:09:35</sys_updated_on>
        <version_container_id>ce72f041dbd8e380c71f6583ca96196c</version_container_id>
    </wf_element_activity>
    <sys_translated_text action="delete_multiple" query="documentkey=31227441dbd8e380c71f6583ca961981"/>
    <wf_versionable action="INSERT_OR_UPDATE">
        <checked_out/>
        <checked_out_by/>
        <published>true</published>
        <sys_created_by>john.depot</sys_created_by>
        <sys_created_on>2018-08-31 11:06:17</sys_created_on>
        <sys_id>0a72b841dbd8e380c71f6583ca961947</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>john.depot</sys_updated_by>
        <sys_updated_on>2018-08-31 11:09:35</sys_updated_on>
        <valid_from>2018-08-31 11:09:35</valid_from>
        <valid_to/>
        <version>1</version>
        <version_container_id>ce72f041dbd8e380c71f6583ca96196c</version_container_id>
        <wf_element_definition display_value="Get VM IP">31227441dbd8e380c71f6583ca961981</wf_element_definition>
    </wf_versionable>
</record_update>
